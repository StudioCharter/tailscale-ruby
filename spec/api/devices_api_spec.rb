=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DevicesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DevicesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DevicesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DevicesApi' do
    it 'should create an instance of DevicesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DevicesApi)
    end
  end

  # unit tests for authorize_device
  # Authorize device
  # This call marks a device as authorized or revokes its authorization for tailnets where device authorization is required, according to the authorized field in the payload.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [AuthorizeDeviceRequest] :authorize_device_request 
  # @return [nil]
  describe 'authorize_device test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_custom_device_posture_attributes
  # Delete custom device posture attributes
  # Delete a posture attribute from the specified device. This is only applicable to user-managed posture attributes in the custom namespace, which is indicated by prefixing the attribute key with &#x60;custom:&#x60;.  OAuth Scope: &#x60;devices:posture_attributes&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param attribute_key The name of the posture attribute to set. This must be prefixed with &#x60;custom&#x60;:  Keys have a maximum length of 50 characters including the namespace, and can only contain letters, numbers, underscores, and colon.  Keys are case-sensitive. Keys must be unique, but are checked for uniqueness in a case-insensitive manner. For example, &#x60;custom:MyAttribute&#x60; and &#x60;custom:myattribute&#x60; cannot both be set within a single tailnet.  All values for a given key need to be of the same type, which is determined when the first value is written for a given key. For example, &#x60;custom:myattribute&#x60; cannot have a numeric value (&#x60;87&#x60;) for one node and a string value (&#x60;\&quot;78\&quot;&#x60;) for another node within the same tailnet. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_custom_device_posture_attributes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_device
  # Delete a device
  # Deletes the device from its tailnet. The device must belong to the requesting user&#39;s tailnet. Deleting devices shared with the tailnet is not supported.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Optionally controls whether the response returns **all** fields or only a predefined subset of fields. Currently, there are two supported options:  - **&#x60;all&#x60;:** return all fields in the response - **&#x60;default&#x60;:** return the following fields   - &#x60;addresses&#x60;   - &#x60;id&#x60;   - &#x60;nodeId&#x60;   - &#x60;user&#x60;   - &#x60;name&#x60;   - &#x60;hostname&#x60;   - &#x60;clientVersion&#x60;   - &#x60;updateAvailable&#x60;   - &#x60;os&#x60;   - &#x60;created&#x60;   - &#x60;lastSeen&#x60;   - &#x60;keyExpiryDisabled&#x60;   - &#x60;expires&#x60;   - &#x60;authorized&#x60;   - &#x60;isExternal&#x60;   - &#x60;machineKey&#x60;   - &#x60;nodeKey&#x60;   - &#x60;blocksIncomingConnections&#x60;   - &#x60;tailnetLockKey&#x60;   - &#x60;tailnetLockError&#x60;   - &#x60;tags&#x60;  If the &#x60;fields&#x60; parameter is not supplied, then the default (limited fields) option is used. 
  # @return [nil]
  describe 'delete_device test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for expire_device_key
  # Expire a device&#39;s key
  # Mark a device&#39;s node key as expired. This will require the device to re-authenticate in order to connect to the tailnet. The device must belong to the requesting user&#39;s tailnet.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'expire_device_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_device
  # Get a device
  # Retrieve the details for the specified device.  OAuth Scope: &#x60;devices:core:read&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Optionally controls whether the response returns **all** fields or only a predefined subset of fields. Currently, there are two supported options:  - **&#x60;all&#x60;:** return all fields in the response - **&#x60;default&#x60;:** return the following fields   - &#x60;addresses&#x60;   - &#x60;id&#x60;   - &#x60;nodeId&#x60;   - &#x60;user&#x60;   - &#x60;name&#x60;   - &#x60;hostname&#x60;   - &#x60;clientVersion&#x60;   - &#x60;updateAvailable&#x60;   - &#x60;os&#x60;   - &#x60;created&#x60;   - &#x60;lastSeen&#x60;   - &#x60;keyExpiryDisabled&#x60;   - &#x60;expires&#x60;   - &#x60;authorized&#x60;   - &#x60;isExternal&#x60;   - &#x60;machineKey&#x60;   - &#x60;nodeKey&#x60;   - &#x60;blocksIncomingConnections&#x60;   - &#x60;tailnetLockKey&#x60;   - &#x60;tailnetLockError&#x60;   - &#x60;tags&#x60;  If the &#x60;fields&#x60; parameter is not supplied, then the default (limited fields) option is used. 
  # @return [Device]
  describe 'get_device test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_device_posture_attributes
  # Get device posture attributes
  # Retrieve all posture attributes for the specified device. This returns a JSON object of all the key-value pairs of posture attributes for the device.  OAuth Scope: &#x60;devices:posture_attributes:read&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @return [DevicePostureAttributes]
  describe 'get_device_posture_attributes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_device_routes
  # List device routes
  # Retrieve the list of subnet routes that a device is advertising, as well as those that are enabled for it.  Routes must be both advertised and enabled for a device to act as a subnet router or exit node. If a device has advertised routes, they are not exposed to traffic until they are enabled. Conversely, if routes are enabled before they are advertised, they are not available for routing until the device in question has advertised them.  Learn more about [subnet routers](/kb/1019/subnets) and [exit nodes](/kb/1103/exit-nodes).  OAuth Scope: &#x60;devices:routes:read&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @return [DeviceRoutes]
  describe 'list_device_routes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_tailnet_devices
  # List tailnet devices
  # Lists the devices in a tailnet.  OAuth Scope: &#x60;devices:core:read&#x60;. 
  # @param tailnet The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Optionally controls whether the response returns **all** fields or only a predefined subset of fields. Currently, there are two supported options:  - **&#x60;all&#x60;:** return all fields in the response - **&#x60;default&#x60;:** return the following fields   - &#x60;addresses&#x60;   - &#x60;id&#x60;   - &#x60;nodeId&#x60;   - &#x60;user&#x60;   - &#x60;name&#x60;   - &#x60;hostname&#x60;   - &#x60;clientVersion&#x60;   - &#x60;updateAvailable&#x60;   - &#x60;os&#x60;   - &#x60;created&#x60;   - &#x60;lastSeen&#x60;   - &#x60;keyExpiryDisabled&#x60;   - &#x60;expires&#x60;   - &#x60;authorized&#x60;   - &#x60;isExternal&#x60;   - &#x60;machineKey&#x60;   - &#x60;nodeKey&#x60;   - &#x60;blocksIncomingConnections&#x60;   - &#x60;tailnetLockKey&#x60;   - &#x60;tailnetLockError&#x60;   - &#x60;tags&#x60;  If the &#x60;fields&#x60; parameter is not supplied, then the default (limited fields) option is used. 
  # @return [ListTailnetDevices200Response]
  describe 'list_tailnet_devices test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_custom_device_posture_attributes
  # Set custom device posture attributes
  # Create or update a custom posture attribute on the specified device. User-managed attributes must be in the custom namespace, which is indicated by prefixing the attribute key with &#x60;custom:&#x60;.  Custom device posture attributes are available for the Personal and Enterprise plans.  OAuth Scope: &#x60;devices:posture_attributes&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param attribute_key The name of the posture attribute to set. This must be prefixed with &#x60;custom&#x60;:  Keys have a maximum length of 50 characters including the namespace, and can only contain letters, numbers, underscores, and colon.  Keys are case-sensitive. Keys must be unique, but are checked for uniqueness in a case-insensitive manner. For example, &#x60;custom:MyAttribute&#x60; and &#x60;custom:myattribute&#x60; cannot both be set within a single tailnet.  All values for a given key need to be of the same type, which is determined when the first value is written for a given key. For example, &#x60;custom:myattribute&#x60; cannot have a numeric value (&#x60;87&#x60;) for one node and a string value (&#x60;\&quot;78\&quot;&#x60;) for another node within the same tailnet. 
  # @param set_custom_device_posture_attributes_request 
  # @param [Hash] opts the optional parameters
  # @return [DevicePostureAttributes]
  describe 'set_custom_device_posture_attributes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_device_ip
  # Set device IPv4 address
  # When a device is added to a tailnet, its Tailscale IPv4 address is set at random either from the CGNAT range, or a subset of the CGNAT range specified by an [ip pool](https://tailscale.com/kb/1304/ip-pool). This endpoint can be used to replace the existing IPv4 address with a specific value.  This action will break any existing connections to this machine. You will need to reconnect to this machine using the new IP address. You may also need to flush your DNS cache.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [SetDeviceIpRequest] :set_device_ip_request 
  # @return [nil]
  describe 'set_device_ip test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_device_name
  # Set device name
  # When a device is added to a tailnet, its Tailscale [device name](https://tailscale.com/kb/1098/machine-names) (also sometimes referred to as machine name) is generated from its OS hostname. The device name is the canonical name for the device on your tailnet.  Device name changes immediately get propogated through your tailnet, so be aware that any existing [Magic DNS](https://tailscale.com/kb/1081/magicdns) URLs using the old name will no longer work.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [SetDeviceNameRequest] :set_device_name_request 
  # @return [nil]
  describe 'set_device_name test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_device_routes
  # Set device routes
  # Set a device&#39;s enabled subnet routes by replacing the existing list of subnet routes with the supplied parameters. [Advertised routes](/kb/1019/subnets#advertise-subnet-routes) cannot be set through the API, since they must be set directly on the device.  Routes must be both advertised and enabled for a device to act as a subnet router or exit node. If a device has advertised routes, they are not exposed to traffic until they are enabled. Conversely, if routes are enabled before they are advertised, they are not available for routing until the device in question has advertised them.  Learn more about [subnet routers](/kb/1019/subnets) and [exit nodes](/kb/1103/exit-nodes).  OAuth Scope: &#x60;devices:routes&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param set_device_routes_request 
  # @param [Hash] opts the optional parameters
  # @return [DeviceRoutes]
  describe 'set_device_routes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_device_tags
  # Set device tags
  # Tags let you assign an identity to a device that is separate from human users, and use that identity as part of an ACL to restrict access. Tags are similar to role accounts, but more flexible.  Tags are created in the tailnet policy file by defining the tag and an owner of the tag. Once a device is tagged, the tag is the owner of that device. A single node can have multiple tags assigned.  Consult the policy file for your tailnet in the [admin console](https://login.tailscale.com/admin/acls) for the list of tags that have been created for your tailnet. Learn more about [tags](https://tailscale.com/kb/1068/).  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [SetDeviceTagsRequest] :set_device_tags_request 
  # @return [nil]
  describe 'set_device_tags test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_device_key
  # Update device key
  # When a device is added to a tailnet, its key expiry is set according to the tailnet&#39;s key expiry setting. If the key is not refreshed and expires, the device can no longer communicate with other devices in the tailnet.  OAuth Scope: &#x60;devices:core&#x60;. 
  # @param device_id ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateDeviceKeyRequest] :update_device_key_request 
  # @return [nil]
  describe 'update_device_key test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
