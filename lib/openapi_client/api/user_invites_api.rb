=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module OpenapiClient
  class UserInvitesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create user invites
    # Create, and optionally email out, new user invites to join the tailnet.
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CreateUserInvitesRequestInner>] :create_user_invites_request_inner 
    # @return [Array<UserInvite>]
    def create_user_invites(tailnet, opts = {})
      data, _status_code, _headers = create_user_invites_with_http_info(tailnet, opts)
      data
    end

    # Create user invites
    # Create, and optionally email out, new user invites to join the tailnet.
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CreateUserInvitesRequestInner>] :create_user_invites_request_inner 
    # @return [Array<(Array<UserInvite>, Integer, Hash)>] Array<UserInvite> data, response status code and response headers
    def create_user_invites_with_http_info(tailnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitesApi.create_user_invites ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling UserInvitesApi.create_user_invites"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/user-invites'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_user_invites_request_inner'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserInvite>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitesApi.create_user_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitesApi#create_user_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user invite
    # Deletes a specific user invite. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_invite(user_invite_id, opts = {})
      delete_user_invite_with_http_info(user_invite_id, opts)
      nil
    end

    # Delete a user invite
    # Deletes a specific user invite. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_invite_with_http_info(user_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitesApi.delete_user_invite ...'
      end
      # verify the required parameter 'user_invite_id' is set
      if @api_client.config.client_side_validation && user_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_invite_id' when calling UserInvitesApi.delete_user_invite"
      end
      # resource path
      local_var_path = '/user-invites/{userInviteId}'.sub('{' + 'userInviteId' + '}', CGI.escape(user_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitesApi.delete_user_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitesApi#delete_user_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user invite
    # Retrieve a specific user invite. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [UserInvite]
    def get_user_invite(user_invite_id, opts = {})
      data, _status_code, _headers = get_user_invite_with_http_info(user_invite_id, opts)
      data
    end

    # Get a user invite
    # Retrieve a specific user invite. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvite, Integer, Hash)>] UserInvite data, response status code and response headers
    def get_user_invite_with_http_info(user_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitesApi.get_user_invite ...'
      end
      # verify the required parameter 'user_invite_id' is set
      if @api_client.config.client_side_validation && user_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_invite_id' when calling UserInvitesApi.get_user_invite"
      end
      # resource path
      local_var_path = '/user-invites/{userInviteId}'.sub('{' + 'userInviteId' + '}', CGI.escape(user_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserInvite'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitesApi.get_user_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitesApi#get_user_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List user invites
    # List all open (not yet accepted) user invites to the tailnet.
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @return [Array<UserInvite>]
    def list_user_invites(tailnet, opts = {})
      data, _status_code, _headers = list_user_invites_with_http_info(tailnet, opts)
      data
    end

    # List user invites
    # List all open (not yet accepted) user invites to the tailnet.
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserInvite>, Integer, Hash)>] Array<UserInvite> data, response status code and response headers
    def list_user_invites_with_http_info(tailnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitesApi.list_user_invites ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling UserInvitesApi.list_user_invites"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/user-invites'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UserInvite>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitesApi.list_user_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitesApi#list_user_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend a user invite
    # Resend a user invite by email. You can only use this if the specified invite was originally created with an email specified. Refer to [creating user invites for a tailnet](#tag/userinvites/post/tailnet/{tailnet}/user-invites).  Note: Invite resends are rate limited to one per minute. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_user_invite(user_invite_id, opts = {})
      resend_user_invite_with_http_info(user_invite_id, opts)
      nil
    end

    # Resend a user invite
    # Resend a user invite by email. You can only use this if the specified invite was originally created with an email specified. Refer to [creating user invites for a tailnet](#tag/userinvites/post/tailnet/{tailnet}/user-invites).  Note: Invite resends are rate limited to one per minute. 
    # @param user_invite_id [String] ID of the user invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def resend_user_invite_with_http_info(user_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitesApi.resend_user_invite ...'
      end
      # verify the required parameter 'user_invite_id' is set
      if @api_client.config.client_side_validation && user_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_invite_id' when calling UserInvitesApi.resend_user_invite"
      end
      # resource path
      local_var_path = '/user-invites/{userInviteId}/resend'.sub('{' + 'userInviteId' + '}', CGI.escape(user_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitesApi.resend_user_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitesApi#resend_user_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
