=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module OpenapiClient
  class DeviceInvitesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept a device invite
    # Accepts the invitation to share a device into the requesting user's tailnet.  Note that device invites cannot be accepted using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptDeviceInviteRequest] :accept_device_invite_request 
    # @return [AcceptDeviceInvite200Response]
    def accept_device_invite(opts = {})
      data, _status_code, _headers = accept_device_invite_with_http_info(opts)
      data
    end

    # Accept a device invite
    # Accepts the invitation to share a device into the requesting user&#39;s tailnet.  Note that device invites cannot be accepted using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptDeviceInviteRequest] :accept_device_invite_request 
    # @return [Array<(AcceptDeviceInvite200Response, Integer, Hash)>] AcceptDeviceInvite200Response data, response status code and response headers
    def accept_device_invite_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.accept_device_invite ...'
      end
      # resource path
      local_var_path = '/device-invites/-/accept'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'accept_device_invite_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AcceptDeviceInvite200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.accept_device_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#accept_device_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create device invites
    # Create new share invites for a device.  Note that device invites cannot be created using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param device_id [String] ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CreateDeviceInvitesRequestInner>] :create_device_invites_request_inner Device invites to create.
    # @return [Array<DeviceInvite>]
    def create_device_invites(device_id, opts = {})
      data, _status_code, _headers = create_device_invites_with_http_info(device_id, opts)
      data
    end

    # Create device invites
    # Create new share invites for a device.  Note that device invites cannot be created using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param device_id [String] ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<CreateDeviceInvitesRequestInner>] :create_device_invites_request_inner Device invites to create.
    # @return [Array<(Array<DeviceInvite>, Integer, Hash)>] Array<DeviceInvite> data, response status code and response headers
    def create_device_invites_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.create_device_invites ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceInvitesApi.create_device_invites"
      end
      # resource path
      local_var_path = '/device/{deviceId}/device-invites'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_device_invites_request_inner'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DeviceInvite>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.create_device_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#create_device_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a device invite
    # Delete a specific device invite.  OAuth Scope: `device_invites`. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_device_invite(device_invite_id, opts = {})
      delete_device_invite_with_http_info(device_invite_id, opts)
      nil
    end

    # Delete a device invite
    # Delete a specific device invite.  OAuth Scope: &#x60;device_invites&#x60;. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_device_invite_with_http_info(device_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.delete_device_invite ...'
      end
      # verify the required parameter 'device_invite_id' is set
      if @api_client.config.client_side_validation && device_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_invite_id' when calling DeviceInvitesApi.delete_device_invite"
      end
      # resource path
      local_var_path = '/device-invites/{deviceInviteId}'.sub('{' + 'deviceInviteId' + '}', CGI.escape(device_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.delete_device_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#delete_device_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a device invite
    # Retrieve a specific device invite.  OAuth Scope: `device_invites:read`. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [DeviceInvite]
    def get_device_invite(device_invite_id, opts = {})
      data, _status_code, _headers = get_device_invite_with_http_info(device_invite_id, opts)
      data
    end

    # Get a device invite
    # Retrieve a specific device invite.  OAuth Scope: &#x60;device_invites:read&#x60;. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceInvite, Integer, Hash)>] DeviceInvite data, response status code and response headers
    def get_device_invite_with_http_info(device_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.get_device_invite ...'
      end
      # verify the required parameter 'device_invite_id' is set
      if @api_client.config.client_side_validation && device_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_invite_id' when calling DeviceInvitesApi.get_device_invite"
      end
      # resource path
      local_var_path = '/device-invites/{deviceInviteId}'.sub('{' + 'deviceInviteId' + '}', CGI.escape(device_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceInvite'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.get_device_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#get_device_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List device invites
    # List all share invites for a device.  OAuth Scope: `device_invites:read`. 
    # @param device_id [String] ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
    # @param [Hash] opts the optional parameters
    # @return [Array<DeviceInvite>]
    def list_device_invites(device_id, opts = {})
      data, _status_code, _headers = list_device_invites_with_http_info(device_id, opts)
      data
    end

    # List device invites
    # List all share invites for a device.  OAuth Scope: &#x60;device_invites:read&#x60;. 
    # @param device_id [String] ID of the device. Using the device&#39;s &#x60;nodeId&#x60; is preferred, but its numeric &#x60;id&#x60; value can also be used. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeviceInvite>, Integer, Hash)>] Array<DeviceInvite> data, response status code and response headers
    def list_device_invites_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.list_device_invites ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceInvitesApi.list_device_invites"
      end
      # resource path
      local_var_path = '/device/{deviceId}/device-invites'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DeviceInvite>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.list_device_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#list_device_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend a device invite
    # Resend a device invite by email. You can only use this if the specified invite was originally created with an email specified. Refer to [creating device invites for a device](#tag/deviceinvites/post/device/{deviceId}/device-invites).  Note: Invite resends are rate limited to one per minute.  Note that device invites cannot be resent using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_device_invite(device_invite_id, opts = {})
      resend_device_invite_with_http_info(device_invite_id, opts)
      nil
    end

    # Resend a device invite
    # Resend a device invite by email. You can only use this if the specified invite was originally created with an email specified. Refer to [creating device invites for a device](#tag/deviceinvites/post/device/{deviceId}/device-invites).  Note: Invite resends are rate limited to one per minute.  Note that device invites cannot be resent using an API access token generated from an OAuth client as the shared device is scoped to a user. 
    # @param device_invite_id [String] ID of the device invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def resend_device_invite_with_http_info(device_invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceInvitesApi.resend_device_invite ...'
      end
      # verify the required parameter 'device_invite_id' is set
      if @api_client.config.client_side_validation && device_invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_invite_id' when calling DeviceInvitesApi.resend_device_invite"
      end
      # resource path
      local_var_path = '/device-invites/{deviceInviteId}/resend'.sub('{' + 'deviceInviteId' + '}', CGI.escape(device_invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceInvitesApi.resend_device_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceInvitesApi#resend_device_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
