=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module OpenapiClient
  class LoggingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Disable log streaming
    # Delete the log streaming configuration for the provided log type.  OAuth Scope: `log_streaming`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_log_streaming(tailnet, log_type, opts = {})
      disable_log_streaming_with_http_info(tailnet, log_type, opts)
      nil
    end

    # Disable log streaming
    # Delete the log streaming configuration for the provided log type.  OAuth Scope: &#x60;log_streaming&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_log_streaming_with_http_info(tailnet, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.disable_log_streaming ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.disable_log_streaming"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling LoggingApi.disable_log_streaming"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/{logType}/stream'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s)).sub('{' + 'logType' + '}', CGI.escape(log_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.disable_log_streaming",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#disable_log_streaming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or get AWS external id
    # Get an AWS external id to use for streaming tailnet logs to S3 using role-based authentication, creating a new one for this tailnet when necessary.  OAuth Scope: `log_streaming`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAwsExternalIdRequest] :get_aws_external_id_request 
    # @return [AwsExternalId]
    def get_aws_external_id(tailnet, opts = {})
      data, _status_code, _headers = get_aws_external_id_with_http_info(tailnet, opts)
      data
    end

    # Create or get AWS external id
    # Get an AWS external id to use for streaming tailnet logs to S3 using role-based authentication, creating a new one for this tailnet when necessary.  OAuth Scope: &#x60;log_streaming&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAwsExternalIdRequest] :get_aws_external_id_request 
    # @return [Array<(AwsExternalId, Integer, Hash)>] AwsExternalId data, response status code and response headers
    def get_aws_external_id_with_http_info(tailnet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.get_aws_external_id ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.get_aws_external_id"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/aws-external-id'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_aws_external_id_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'AwsExternalId'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.get_aws_external_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#get_aws_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get log streaming configuration
    # Retrieve the log streaming configuration for the provided log type.  OAuth Scope: `log_streaming:read`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [LogstreamEndpointConfiguration]
    def get_log_streaming_configuration(tailnet, log_type, opts = {})
      data, _status_code, _headers = get_log_streaming_configuration_with_http_info(tailnet, log_type, opts)
      data
    end

    # Get log streaming configuration
    # Retrieve the log streaming configuration for the provided log type.  OAuth Scope: &#x60;log_streaming:read&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogstreamEndpointConfiguration, Integer, Hash)>] LogstreamEndpointConfiguration data, response status code and response headers
    def get_log_streaming_configuration_with_http_info(tailnet, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.get_log_streaming_configuration ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.get_log_streaming_configuration"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling LoggingApi.get_log_streaming_configuration"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/{logType}/stream'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s)).sub('{' + 'logType' + '}', CGI.escape(log_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogstreamEndpointConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.get_log_streaming_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#get_log_streaming_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get log streaming status
    # Retrieve the log streaming status for the provided log type.  OAuth Scope: `log_streaming:read`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [LogstreamEndpointPublishingStatus]
    def get_log_streaming_status(tailnet, log_type, opts = {})
      data, _status_code, _headers = get_log_streaming_status_with_http_info(tailnet, log_type, opts)
      data
    end

    # Get log streaming status
    # Retrieve the log streaming status for the provided log type.  OAuth Scope: &#x60;log_streaming:read&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogstreamEndpointPublishingStatus, Integer, Hash)>] LogstreamEndpointPublishingStatus data, response status code and response headers
    def get_log_streaming_status_with_http_info(tailnet, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.get_log_streaming_status ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.get_log_streaming_status"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling LoggingApi.get_log_streaming_status"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/{logType}/stream/status'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s)).sub('{' + 'logType' + '}', CGI.escape(log_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogstreamEndpointPublishingStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.get_log_streaming_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#get_log_streaming_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List configuration audit logs
    # List all configuration audit logs for a tailnet.  OAuth Scope: `logs:configuration:read`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param start [String] The start of the time window for which to retrieve logs, in RFC 3339 format.
    # @param _end [String] The end of the time window for which to retrieve logs, in RFC 3339 format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :actor List of filters on actors, either exact actor IDs or a wildcard search on login name or display name indicated as &#x60;~search&#x60;.
    # @option opts [Array<String>] :target List of target elements for which to filter, attempts to match any part of any of the targets to any of the given strings.
    # @option opts [Array<String>] :event List of events for which to filter.
    # @return [ListConfigurationAuditLogs200Response]
    def list_configuration_audit_logs(tailnet, start, _end, opts = {})
      data, _status_code, _headers = list_configuration_audit_logs_with_http_info(tailnet, start, _end, opts)
      data
    end

    # List configuration audit logs
    # List all configuration audit logs for a tailnet.  OAuth Scope: &#x60;logs:configuration:read&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param start [String] The start of the time window for which to retrieve logs, in RFC 3339 format.
    # @param _end [String] The end of the time window for which to retrieve logs, in RFC 3339 format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :actor List of filters on actors, either exact actor IDs or a wildcard search on login name or display name indicated as &#x60;~search&#x60;.
    # @option opts [Array<String>] :target List of target elements for which to filter, attempts to match any part of any of the targets to any of the given strings.
    # @option opts [Array<String>] :event List of events for which to filter.
    # @return [Array<(ListConfigurationAuditLogs200Response, Integer, Hash)>] ListConfigurationAuditLogs200Response data, response status code and response headers
    def list_configuration_audit_logs_with_http_info(tailnet, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.list_configuration_audit_logs ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.list_configuration_audit_logs"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling LoggingApi.list_configuration_audit_logs"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling LoggingApi.list_configuration_audit_logs"
      end
      allowable_values = ["ADMIN_CONSOLE.LOGIN", "ADMIN_CONSOLE.LOGOUT", "API_KEY.CREATE", "API_KEY.EXPIRED", "API_KEY.REVOKE", "BILLING.CANCEL.SUBSCRIPTION", "BILLING.CREATE.SUBSCRIPTION", "BILLING.UPDATE.ADDRESS", "BILLING.UPDATE.BILLING_OWNER", "BILLING.UPDATE.EMAIL", "BILLING.UPDATE.PAYMENT_INFO", "BILLING.UPDATE.STRIPE_CUSTOMER_ID", "BILLING.UPDATE.SUBSCRIPTION", "FAILED_REQUEST.UPDATE", "GROUP.PUSH_GROUP.ATTRIBUTES", "INVITE.ACCEPT.FEATURE", "INVITE.ACCEPT.NODE_SHARE", "INVITE.ACCEPT.TAILNET_INVITE", "INVITE.CREATE.FEATURE", "INVITE.CREATE.NODE_SHARE", "INVITE.CREATE.TAILNET_INVITE", "INVITE.DELETE.NODE_SHARE", "INVITE.DELETE.TAILNET_INVITE", "INVITE.RESEND.NODE_SHARE", "INVITE.RESEND.TAILNET_INVITE", "NODE.APPROVE", "NODE.CREATE", "NODE.CREATE.ATTRIBUTES", "NODE.DELETE", "NODE.DELETE.ATTRIBUTES", "NODE.DISABLE.KEY_EXPIRY", "NODE.DISCONNECT_NODE.CLIENT_LOG", "NODE.ENABLE.KEY_EXPIRY", "NODE.EXPIRED.KEY_EXPIRY_TIME", "NODE.LOGIN", "NODE.LOGOUT", "NODE.REVOKE", "NODE.UPDATE.ACL_TAGS", "NODE.UPDATE.ALLOWED_IPS", "NODE.UPDATE.ATTRIBUTES", "NODE.UPDATE.AUTO_APPROVED_ROUTES", "NODE.UPDATE.EXIT_NODE", "NODE.UPDATE.KEY_EXPIRY_TIME", "NODE.UPDATE.MACHINE_NAME", "NODE.UPDATE.POSTURE_IDENTITY", "NODE.UPDATE.TKA", "SHARE.CREATE", "SHARE.DELETE", "SHARE.UPDATE", "TAILNET.ACCEPT.FEATURE", "TAILNET.CREATE", "TAILNET.CREATE.LOGSTREAM_ENDPOINT", "TAILNET.CREATE.POSTURE_INTEGRATION", "TAILNET.CREATE.TKA", "TAILNET.DELETE.LOGSTREAM_ENDPOINT", "TAILNET.DELETE.POSTURE_INTEGRATION", "TAILNET.DELETE.TKA", "TAILNET.DISABLE.COLLECT_POSTURE_IDENTITY", "TAILNET.DISABLE.COLLECT_SERVICES", "TAILNET.DISABLE.FILE_SHARING", "TAILNET.DISABLE.GEOSTEERING", "TAILNET.DISABLE.HTTPS", "TAILNET.DISABLE.LOG_EXIT_FLOWS", "TAILNET.DISABLE.MACHINE_APPROVAL_NEEDED", "TAILNET.DISABLE.MAGIC_DNS", "TAILNET.DISABLE.MULLVAD_VPN", "TAILNET.DISABLE.NETWORK_FLOW_LOGGING", "TAILNET.DISABLE.SCIM", "TAILNET.DISABLE.TKA", "TAILNET.DISABLE.USER_APPROVAL_REQUIRED", "TAILNET.ENABLE.COLLECT_POSTURE_IDENTITY", "TAILNET.ENABLE.COLLECT_SERVICES", "TAILNET.ENABLE.FILE_SHARING", "TAILNET.ENABLE.GEOSTEERING", "TAILNET.ENABLE.HTTPS", "TAILNET.ENABLE.LOG_EXIT_FLOWS", "TAILNET.ENABLE.MACHINE_APPROVAL_NEEDED", "TAILNET.ENABLE.MAGIC_DNS", "TAILNET.ENABLE.MULLVAD_VPN", "TAILNET.ENABLE.NETWORK_FLOW_LOGGING", "TAILNET.ENABLE.SCIM", "TAILNET.ENABLE.TKA", "TAILNET.ENABLE.USER_APPROVAL_REQUIRED", "TAILNET.JOIN", "TAILNET.JOIN_WAITLIST.FEATURE", "TAILNET.LEAVE", "TAILNET.UPDATE.ACCOUNT_EMAIL", "TAILNET.UPDATE.ACL", "TAILNET.UPDATE.DNS_CONFIG", "TAILNET.UPDATE.LOGSTREAM_ENDPOINT", "TAILNET.UPDATE.MAX_KEY_DURATION", "TAILNET.UPDATE.POSTURE_INTEGRATION", "TAILNET.UPDATE.SECURITY_EMAIL", "TAILNET.UPDATE.SUPPORT_EMAIL", "TAILNET.UPDATE.TCD", "TAILNET.UPDATE.TKA", "TAILNET.VERIFY.ACCOUNT_EMAIL", "TAILNET.VERIFY.SECURITY_EMAIL", "TAILNET.VERIFY.SUPPORT_EMAIL", "USER.APPROVE", "USER.CREATE", "USER.DELETE", "USER.INVITE", "USER.PUSH_USER.ATTRIBUTES", "USER.RESEND.TAILNET_INVITE", "USER.RESTORE", "USER.SUSPEND", "USER.UPDATE.USER_ROLE", "WEBHOOK_ENDPOINT.CREATE", "WEBHOOK_ENDPOINT.DELETE", "WEBHOOK_ENDPOINT.UPDATE.SECRET", "WEBHOOK_ENDPOINT.UPDATE.SUBSCRIBED_EVENTS", "WEB_INTERFACE.LOGIN", "WEB_INTERFACE.LOGOUT"]
      if @api_client.config.client_side_validation && opts[:'event'] && !opts[:'event'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"event\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/configuration'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = start
      query_params[:'end'] = _end
      query_params[:'actor'] = @api_client.build_collection_param(opts[:'actor'], :multi) if !opts[:'actor'].nil?
      query_params[:'target'] = @api_client.build_collection_param(opts[:'target'], :multi) if !opts[:'target'].nil?
      query_params[:'event'] = @api_client.build_collection_param(opts[:'event'], :multi) if !opts[:'event'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConfigurationAuditLogs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.list_configuration_audit_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#list_configuration_audit_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List network flow logs
    # List all network flow logs for a tailnet.  OAuth Scope: `logs:network:read`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param start [String] The start of the time window for which to retrieve logs, in RFC 3339 format.
    # @param _end [String] The end of the time window for which to retrieve logs, in RFC 3339 format.
    # @param [Hash] opts the optional parameters
    # @return [ListNetworkFlowLogs200Response]
    def list_network_flow_logs(tailnet, start, _end, opts = {})
      data, _status_code, _headers = list_network_flow_logs_with_http_info(tailnet, start, _end, opts)
      data
    end

    # List network flow logs
    # List all network flow logs for a tailnet.  OAuth Scope: &#x60;logs:network:read&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param start [String] The start of the time window for which to retrieve logs, in RFC 3339 format.
    # @param _end [String] The end of the time window for which to retrieve logs, in RFC 3339 format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListNetworkFlowLogs200Response, Integer, Hash)>] ListNetworkFlowLogs200Response data, response status code and response headers
    def list_network_flow_logs_with_http_info(tailnet, start, _end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.list_network_flow_logs ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.list_network_flow_logs"
      end
      # verify the required parameter 'start' is set
      if @api_client.config.client_side_validation && start.nil?
        fail ArgumentError, "Missing the required parameter 'start' when calling LoggingApi.list_network_flow_logs"
      end
      # verify the required parameter '_end' is set
      if @api_client.config.client_side_validation && _end.nil?
        fail ArgumentError, "Missing the required parameter '_end' when calling LoggingApi.list_network_flow_logs"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/network'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = start
      query_params[:'end'] = _end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListNetworkFlowLogs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.list_network_flow_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#list_network_flow_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set log streaming configuration
    # Set the log streaming configuration for the provided log type.  OAuth Scope: `log_streaming`. `device_invites` and `policy_file` are also required if streaming to a [private endpoint](https://tailscale.com/kb/1255/log-streaming#private-endpoints). 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @option opts [LogstreamEndpointConfiguration] :logstream_endpoint_configuration The [LogstreamEndpointConfiguration](#model/logstreamendpointconfiguration) to set. &#x60;logType&#x60; is specified in the request URL rather than the body. 
    # @return [nil]
    def set_log_streaming_configuration(tailnet, log_type, opts = {})
      set_log_streaming_configuration_with_http_info(tailnet, log_type, opts)
      nil
    end

    # Set log streaming configuration
    # Set the log streaming configuration for the provided log type.  OAuth Scope: &#x60;log_streaming&#x60;. &#x60;device_invites&#x60; and &#x60;policy_file&#x60; are also required if streaming to a [private endpoint](https://tailscale.com/kb/1255/log-streaming#private-endpoints). 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param log_type [LogType] The type of log.
    # @param [Hash] opts the optional parameters
    # @option opts [LogstreamEndpointConfiguration] :logstream_endpoint_configuration The [LogstreamEndpointConfiguration](#model/logstreamendpointconfiguration) to set. &#x60;logType&#x60; is specified in the request URL rather than the body. 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_log_streaming_configuration_with_http_info(tailnet, log_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.set_log_streaming_configuration ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.set_log_streaming_configuration"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling LoggingApi.set_log_streaming_configuration"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/logging/{logType}/stream'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s)).sub('{' + 'logType' + '}', CGI.escape(log_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'logstream_endpoint_configuration'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.set_log_streaming_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#set_log_streaming_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate external ID integration with IAM role trust policy
    # Validate that Tailscale can assume your IAM role with (and only with) this external ID.  OAuth Scope: `log_streaming`. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param id [String] The AWS external ID to validate.
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateAwsExternalIdRequest] :validate_aws_external_id_request 
    # @return [nil]
    def validate_aws_external_id(tailnet, id, opts = {})
      validate_aws_external_id_with_http_info(tailnet, id, opts)
      nil
    end

    # Validate external ID integration with IAM role trust policy
    # Validate that Tailscale can assume your IAM role with (and only with) this external ID.  OAuth Scope: &#x60;log_streaming&#x60;. 
    # @param tailnet [String] The tailnet organization name.  When specifying a tailnet in the API, you can:  - Provide a dash (&#x60;-&#x60;) to reference the default tailnet of the access token being used to make the API call.   This is the best option for most users.   Your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/-/...\&quot;   &#x60;&#x60;&#x60;  - Provide the **organization** name found on the **[General Settings](https://login.tailscale.com/admin/settings/general)**   page of the Tailscale admin console (not to be confused with the \&quot;tailnet name\&quot; found in the DNS tab).    For example, if your organization name is &#x60;alice@example.com&#x60;, your API calls would start:    &#x60;&#x60;&#x60;sh   curl \&quot;https://api.tailscale.com/api/v2/tailnet/alice@example.com/...\&quot;   &#x60;&#x60;&#x60;    Learn more about [tailnet organization names](https://tailscale.com/kb/1217/tailnet-name#organization-name). 
    # @param id [String] The AWS external ID to validate.
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateAwsExternalIdRequest] :validate_aws_external_id_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_aws_external_id_with_http_info(tailnet, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoggingApi.validate_aws_external_id ...'
      end
      # verify the required parameter 'tailnet' is set
      if @api_client.config.client_side_validation && tailnet.nil?
        fail ArgumentError, "Missing the required parameter 'tailnet' when calling LoggingApi.validate_aws_external_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LoggingApi.validate_aws_external_id"
      end
      # resource path
      local_var_path = '/tailnet/{tailnet}/aws-external-id/{id}/validate-aws-trust-policy'.sub('{' + 'tailnet' + '}', CGI.escape(tailnet.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'validate_aws_external_id_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LoggingApi.validate_aws_external_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoggingApi#validate_aws_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
