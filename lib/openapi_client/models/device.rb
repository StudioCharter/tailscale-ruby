=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  # A Tailscale device (sometimes referred to as *node* or *machine*), is any computer or mobile device that joins a tailnet.  Each device has a unique ID (`nodeId` in the schema below) that is used to identify the device in API calls. This ID can be found by going to the [Machines](https://login.tailscale.com/admin/machines) page in the admin console, selecting the relevant device, then finding the ID in the Machine Details section. You can also [list all devices](#tag/devices/get/tailnet/{tailnet}/devices) in the tailnet to get their `nodeId` values. 
  class Device
    # A list of Tailscale IP addresses for the device, including both IPv4 (formatted as 100.x.y.z) and IPv6 (formatted as fd7a:115c:a1e0:a:b:c:d:e) addresses. 
    attr_accessor :addresses

    # The legacy identifier for a device; you can supply this value wherever {deviceId} is indicated in the endpoint. Note that although \"id\" is still accepted, \"nodeId\" is preferred. 
    attr_accessor :id

    # The preferred identifier for a device; supply this value wherever {deviceId} is indicated in the endpoint. 
    attr_accessor :node_id

    # The user who registered the node. For untagged nodes,  this user is the device owner. 
    attr_accessor :user

    # The MagicDNS name of the device. Learn more about MagicDNS at https://tailscale.com/kb/1081/. 
    attr_accessor :name

    # The machine name in the admin console. Learn more about machine names at https://tailscale.com/kb/1098/. 
    attr_accessor :hostname

    # The version of the Tailscale client software; this is empty for external devices. 
    attr_accessor :client_version

    # 'true' if a Tailscale client version upgrade is available. This value is empty for external devices. 
    attr_accessor :update_available

    # The operating system that the device is running. 
    attr_accessor :os

    # The date on which the device was added to the tailnet; this is empty for external devices. 
    attr_accessor :created

    # When device was last active on the tailnet. 
    attr_accessor :last_seen

    # 'true' if the keys for the device will not expire. Learn more at https://tailscale.com/kb/1028/. 
    attr_accessor :key_expiry_disabled

    # The expiration date of the device's auth key. Learn more about key expiry at https://tailscale.com/kb/1028/. 
    attr_accessor :expires

    # 'true' if the device has been authorized to join the tailnet; otherwise, 'false'. Learn more about device authorization at https://tailscale.com/kb/1099/. 
    attr_accessor :authorized

    # 'true', indicates that a device is not a member of the tailnet, but is shared in to the tailnet; if 'false', the device is a member of the tailnet. Learn more about node sharing at https://tailscale.com/kb/1084/. 
    attr_accessor :is_external

    # For internal use and is not required for any API operations. This value is empty for external devices. 
    attr_accessor :machine_key

    # Mostly for internal use, required for select operations, such as adding a node to a locked tailnet. Learn about tailnet locks at https://tailscale.com/kb/1226/. 
    attr_accessor :node_key

    # 'true' if the device is not allowed to accept any connections over Tailscale, including pings. Learn more in the \"Allow incoming connections\" section of https://tailscale.com/kb/1072/. 
    attr_accessor :blocks_incoming_connections

    # The subnet routes for this device that have been approved by a tailnet admin. Learn more about subnet routes at https://tailscale.com/kb/1019/. 
    attr_accessor :enabled_routes

    # The subnets this device requests to expose. Learn more about subnet routes at https://tailscale.com/kb/1019/. 
    attr_accessor :advertised_routes

    attr_accessor :client_connectivity

    # Lets you assign an identity to a device that is separate from human users, and use it as part of an ACL to restrict access. Once a device is tagged, the tag is the owner of that device. A single node can have multiple tags assigned. This value is empty for external devices. Learn more about tags at https://tailscale.com/kb/1068/. 
    attr_accessor :tags

    # Indicates an issue with the tailnet lock node-key signature on this device. This field is only populated when tailnet lock is enabled. 
    attr_accessor :tailnet_lock_error

    # The node's tailnet lock key. Every node generates a tailnet lock key (so the value will be present) even if tailnet lock is not enabled. Learn more about tailnet lock at https://tailscale.com/kb/1226/. 
    attr_accessor :tailnet_lock_key

    attr_accessor :posture_identity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'addresses' => :'addresses',
        :'id' => :'id',
        :'node_id' => :'nodeId',
        :'user' => :'user',
        :'name' => :'name',
        :'hostname' => :'hostname',
        :'client_version' => :'clientVersion',
        :'update_available' => :'updateAvailable',
        :'os' => :'os',
        :'created' => :'created',
        :'last_seen' => :'lastSeen',
        :'key_expiry_disabled' => :'keyExpiryDisabled',
        :'expires' => :'expires',
        :'authorized' => :'authorized',
        :'is_external' => :'isExternal',
        :'machine_key' => :'machineKey',
        :'node_key' => :'nodeKey',
        :'blocks_incoming_connections' => :'blocksIncomingConnections',
        :'enabled_routes' => :'enabledRoutes',
        :'advertised_routes' => :'advertisedRoutes',
        :'client_connectivity' => :'clientConnectivity',
        :'tags' => :'tags',
        :'tailnet_lock_error' => :'tailnetLockError',
        :'tailnet_lock_key' => :'tailnetLockKey',
        :'posture_identity' => :'postureIdentity'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'addresses' => :'Array<String>',
        :'id' => :'String',
        :'node_id' => :'String',
        :'user' => :'String',
        :'name' => :'String',
        :'hostname' => :'String',
        :'client_version' => :'String',
        :'update_available' => :'Boolean',
        :'os' => :'String',
        :'created' => :'Time',
        :'last_seen' => :'Time',
        :'key_expiry_disabled' => :'Boolean',
        :'expires' => :'Time',
        :'authorized' => :'Boolean',
        :'is_external' => :'Boolean',
        :'machine_key' => :'String',
        :'node_key' => :'String',
        :'blocks_incoming_connections' => :'Boolean',
        :'enabled_routes' => :'Array<String>',
        :'advertised_routes' => :'Array<String>',
        :'client_connectivity' => :'DeviceClientConnectivity',
        :'tags' => :'Array<String>',
        :'tailnet_lock_error' => :'String',
        :'tailnet_lock_key' => :'String',
        :'posture_identity' => :'DevicePostureIdentity'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Device` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Device`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'addresses')
        if (value = attributes[:'addresses']).is_a?(Array)
          self.addresses = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'node_id')
        self.node_id = attributes[:'node_id']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'client_version')
        self.client_version = attributes[:'client_version']
      end

      if attributes.key?(:'update_available')
        self.update_available = attributes[:'update_available']
      end

      if attributes.key?(:'os')
        self.os = attributes[:'os']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'last_seen')
        self.last_seen = attributes[:'last_seen']
      end

      if attributes.key?(:'key_expiry_disabled')
        self.key_expiry_disabled = attributes[:'key_expiry_disabled']
      end

      if attributes.key?(:'expires')
        self.expires = attributes[:'expires']
      end

      if attributes.key?(:'authorized')
        self.authorized = attributes[:'authorized']
      end

      if attributes.key?(:'is_external')
        self.is_external = attributes[:'is_external']
      end

      if attributes.key?(:'machine_key')
        self.machine_key = attributes[:'machine_key']
      end

      if attributes.key?(:'node_key')
        self.node_key = attributes[:'node_key']
      end

      if attributes.key?(:'blocks_incoming_connections')
        self.blocks_incoming_connections = attributes[:'blocks_incoming_connections']
      end

      if attributes.key?(:'enabled_routes')
        if (value = attributes[:'enabled_routes']).is_a?(Array)
          self.enabled_routes = value
        end
      end

      if attributes.key?(:'advertised_routes')
        if (value = attributes[:'advertised_routes']).is_a?(Array)
          self.advertised_routes = value
        end
      end

      if attributes.key?(:'client_connectivity')
        self.client_connectivity = attributes[:'client_connectivity']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'tailnet_lock_error')
        self.tailnet_lock_error = attributes[:'tailnet_lock_error']
      end

      if attributes.key?(:'tailnet_lock_key')
        self.tailnet_lock_key = attributes[:'tailnet_lock_key']
      end

      if attributes.key?(:'posture_identity')
        self.posture_identity = attributes[:'posture_identity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          addresses == o.addresses &&
          id == o.id &&
          node_id == o.node_id &&
          user == o.user &&
          name == o.name &&
          hostname == o.hostname &&
          client_version == o.client_version &&
          update_available == o.update_available &&
          os == o.os &&
          created == o.created &&
          last_seen == o.last_seen &&
          key_expiry_disabled == o.key_expiry_disabled &&
          expires == o.expires &&
          authorized == o.authorized &&
          is_external == o.is_external &&
          machine_key == o.machine_key &&
          node_key == o.node_key &&
          blocks_incoming_connections == o.blocks_incoming_connections &&
          enabled_routes == o.enabled_routes &&
          advertised_routes == o.advertised_routes &&
          client_connectivity == o.client_connectivity &&
          tags == o.tags &&
          tailnet_lock_error == o.tailnet_lock_error &&
          tailnet_lock_key == o.tailnet_lock_key &&
          posture_identity == o.posture_identity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [addresses, id, node_id, user, name, hostname, client_version, update_available, os, created, last_seen, key_expiry_disabled, expires, authorized, is_external, machine_key, node_key, blocks_incoming_connections, enabled_routes, advertised_routes, client_connectivity, tags, tailnet_lock_error, tailnet_lock_key, posture_identity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
