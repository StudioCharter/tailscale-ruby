=begin
#Tailscale API

#### Overview  **The API endpoints documented here are stable. However, the OpenAPI spec used to generate this documentation is unstable. It may change or break without notice.**  The Tailscale API is a (mostly) RESTful API. Typically, both POST bodies and responses are JSON-encoded.  ### Base URL  The base URL for the Tailscale API is https://api.tailscale.com/api/v2/.  Examples in this document may abbreviate this to `/api/v2/`.  ### Authentication  Requests to the Tailscale API are authenticated with an API access token (sometimes called an API key). Access tokens can be supplied as the username portion of HTTP Basic authentication (leave the password blank) or as an OAuth Bearer token:  ``` // passing token with basic auth curl -u \"tskey-api-xxxxx:\" https://api.tailscale.com/api/v2/...  // passing token as bearer token curl -H \"Authorization: Bearer tskey-api-xxxxx\" https://api.tailscale.com/api/v2/... ```  Access tokens for individual users can be created and managed from the [Keys](https://login.tailscale.com/admin/settings/keys) page of the admin console. These tokens will have the same permissions as the owning user, and can be set to expire in 1 to 90 days. Access tokens are identifiable by the prefix tskey-api-.  Alternatively, an OAuth client can be used to create short-lived access tokens with scoped permission. OAuth clients don't expire, and can therefore be used to provide ongoing access to the API, creating access tokens as needed. OAuth clients and the access tokens they create are not tied to an individual Tailscale user. OAuth client secrets are identifiable by the prefix tskey-client-. Learn more about [OAuth clients].  [ OAuth clients ]: https://tailscale.com/kb/1215/  ### Errors  The Tailscale API returns status codes consistent with standard HTTP conventions. In addition to the status code, errors may include additional information in the response body:  ``` {   \"message\": \"additional error information\" } ```  ### Pagination  The Tailscale API does not currently support pagination. All results are returned at once.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Latest status of log stream publishing for a specific type of log.
  class LogstreamEndpointPublishingStatus
    # Timestamp of the most recent publishing activity, in RFC 3339 format.
    attr_accessor :last_activity

    # The most recent error (if any).
    attr_accessor :last_error

    # The size of the largest single request body.
    attr_accessor :max_body_size

    # Total bytes published across all requests.
    attr_accessor :num_bytes_sent

    # The total number of entries published.
    attr_accessor :num_entries_sent

    # The number of spoofed entries published. A spoofed entry is one that failed to validate because we did not see receive a matching flow log from the other side of the connection.
    attr_accessor :num_spoofed_entries

    # The total number of requests made to the streaming endpoint.
    attr_accessor :num_total_requests

    # The total number of requests to the streaming endpoint that have failed.
    attr_accessor :num_failed_requests

    # The exponentially weighted moving average rate at which data is being streamed to the endpoint, in bytes per second.
    attr_accessor :rate_bytes_sent

    # The exponentially weighted moving average rate at which entries are being sent to the endpoint, in entries per second.
    attr_accessor :rate_entries_sent

    # The exponentially weighted moving average rate at which requests are being made to the endpoint, in requests per second.
    attr_accessor :rate_total_requests

    # The exponentially weighted moving average rate at which requests are failing, in requests per second.
    attr_accessor :rate_failed_requests

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'last_activity' => :'lastActivity',
        :'last_error' => :'lastError',
        :'max_body_size' => :'maxBodySize',
        :'num_bytes_sent' => :'numBytesSent',
        :'num_entries_sent' => :'numEntriesSent',
        :'num_spoofed_entries' => :'numSpoofedEntries',
        :'num_total_requests' => :'numTotalRequests',
        :'num_failed_requests' => :'numFailedRequests',
        :'rate_bytes_sent' => :'rateBytesSent',
        :'rate_entries_sent' => :'rateEntriesSent',
        :'rate_total_requests' => :'rateTotalRequests',
        :'rate_failed_requests' => :'rateFailedRequests'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'last_activity' => :'String',
        :'last_error' => :'String',
        :'max_body_size' => :'Integer',
        :'num_bytes_sent' => :'Integer',
        :'num_entries_sent' => :'Integer',
        :'num_spoofed_entries' => :'Integer',
        :'num_total_requests' => :'Integer',
        :'num_failed_requests' => :'Integer',
        :'rate_bytes_sent' => :'Float',
        :'rate_entries_sent' => :'Float',
        :'rate_total_requests' => :'Float',
        :'rate_failed_requests' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::LogstreamEndpointPublishingStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::LogstreamEndpointPublishingStatus`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'last_activity')
        self.last_activity = attributes[:'last_activity']
      else
        self.last_activity = nil
      end

      if attributes.key?(:'last_error')
        self.last_error = attributes[:'last_error']
      else
        self.last_error = nil
      end

      if attributes.key?(:'max_body_size')
        self.max_body_size = attributes[:'max_body_size']
      else
        self.max_body_size = nil
      end

      if attributes.key?(:'num_bytes_sent')
        self.num_bytes_sent = attributes[:'num_bytes_sent']
      else
        self.num_bytes_sent = nil
      end

      if attributes.key?(:'num_entries_sent')
        self.num_entries_sent = attributes[:'num_entries_sent']
      else
        self.num_entries_sent = nil
      end

      if attributes.key?(:'num_spoofed_entries')
        self.num_spoofed_entries = attributes[:'num_spoofed_entries']
      else
        self.num_spoofed_entries = nil
      end

      if attributes.key?(:'num_total_requests')
        self.num_total_requests = attributes[:'num_total_requests']
      else
        self.num_total_requests = nil
      end

      if attributes.key?(:'num_failed_requests')
        self.num_failed_requests = attributes[:'num_failed_requests']
      else
        self.num_failed_requests = nil
      end

      if attributes.key?(:'rate_bytes_sent')
        self.rate_bytes_sent = attributes[:'rate_bytes_sent']
      else
        self.rate_bytes_sent = nil
      end

      if attributes.key?(:'rate_entries_sent')
        self.rate_entries_sent = attributes[:'rate_entries_sent']
      else
        self.rate_entries_sent = nil
      end

      if attributes.key?(:'rate_total_requests')
        self.rate_total_requests = attributes[:'rate_total_requests']
      else
        self.rate_total_requests = nil
      end

      if attributes.key?(:'rate_failed_requests')
        self.rate_failed_requests = attributes[:'rate_failed_requests']
      else
        self.rate_failed_requests = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @last_activity.nil?
        invalid_properties.push('invalid value for "last_activity", last_activity cannot be nil.')
      end

      if @last_error.nil?
        invalid_properties.push('invalid value for "last_error", last_error cannot be nil.')
      end

      if @max_body_size.nil?
        invalid_properties.push('invalid value for "max_body_size", max_body_size cannot be nil.')
      end

      if @num_bytes_sent.nil?
        invalid_properties.push('invalid value for "num_bytes_sent", num_bytes_sent cannot be nil.')
      end

      if @num_entries_sent.nil?
        invalid_properties.push('invalid value for "num_entries_sent", num_entries_sent cannot be nil.')
      end

      if @num_spoofed_entries.nil?
        invalid_properties.push('invalid value for "num_spoofed_entries", num_spoofed_entries cannot be nil.')
      end

      if @num_total_requests.nil?
        invalid_properties.push('invalid value for "num_total_requests", num_total_requests cannot be nil.')
      end

      if @num_failed_requests.nil?
        invalid_properties.push('invalid value for "num_failed_requests", num_failed_requests cannot be nil.')
      end

      if @rate_bytes_sent.nil?
        invalid_properties.push('invalid value for "rate_bytes_sent", rate_bytes_sent cannot be nil.')
      end

      if @rate_entries_sent.nil?
        invalid_properties.push('invalid value for "rate_entries_sent", rate_entries_sent cannot be nil.')
      end

      if @rate_total_requests.nil?
        invalid_properties.push('invalid value for "rate_total_requests", rate_total_requests cannot be nil.')
      end

      if @rate_failed_requests.nil?
        invalid_properties.push('invalid value for "rate_failed_requests", rate_failed_requests cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @last_activity.nil?
      return false if @last_error.nil?
      return false if @max_body_size.nil?
      return false if @num_bytes_sent.nil?
      return false if @num_entries_sent.nil?
      return false if @num_spoofed_entries.nil?
      return false if @num_total_requests.nil?
      return false if @num_failed_requests.nil?
      return false if @rate_bytes_sent.nil?
      return false if @rate_entries_sent.nil?
      return false if @rate_total_requests.nil?
      return false if @rate_failed_requests.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] last_activity Value to be assigned
    def last_activity=(last_activity)
      if last_activity.nil?
        fail ArgumentError, 'last_activity cannot be nil'
      end

      @last_activity = last_activity
    end

    # Custom attribute writer method with validation
    # @param [Object] last_error Value to be assigned
    def last_error=(last_error)
      if last_error.nil?
        fail ArgumentError, 'last_error cannot be nil'
      end

      @last_error = last_error
    end

    # Custom attribute writer method with validation
    # @param [Object] max_body_size Value to be assigned
    def max_body_size=(max_body_size)
      if max_body_size.nil?
        fail ArgumentError, 'max_body_size cannot be nil'
      end

      @max_body_size = max_body_size
    end

    # Custom attribute writer method with validation
    # @param [Object] num_bytes_sent Value to be assigned
    def num_bytes_sent=(num_bytes_sent)
      if num_bytes_sent.nil?
        fail ArgumentError, 'num_bytes_sent cannot be nil'
      end

      @num_bytes_sent = num_bytes_sent
    end

    # Custom attribute writer method with validation
    # @param [Object] num_entries_sent Value to be assigned
    def num_entries_sent=(num_entries_sent)
      if num_entries_sent.nil?
        fail ArgumentError, 'num_entries_sent cannot be nil'
      end

      @num_entries_sent = num_entries_sent
    end

    # Custom attribute writer method with validation
    # @param [Object] num_spoofed_entries Value to be assigned
    def num_spoofed_entries=(num_spoofed_entries)
      if num_spoofed_entries.nil?
        fail ArgumentError, 'num_spoofed_entries cannot be nil'
      end

      @num_spoofed_entries = num_spoofed_entries
    end

    # Custom attribute writer method with validation
    # @param [Object] num_total_requests Value to be assigned
    def num_total_requests=(num_total_requests)
      if num_total_requests.nil?
        fail ArgumentError, 'num_total_requests cannot be nil'
      end

      @num_total_requests = num_total_requests
    end

    # Custom attribute writer method with validation
    # @param [Object] num_failed_requests Value to be assigned
    def num_failed_requests=(num_failed_requests)
      if num_failed_requests.nil?
        fail ArgumentError, 'num_failed_requests cannot be nil'
      end

      @num_failed_requests = num_failed_requests
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_bytes_sent Value to be assigned
    def rate_bytes_sent=(rate_bytes_sent)
      if rate_bytes_sent.nil?
        fail ArgumentError, 'rate_bytes_sent cannot be nil'
      end

      @rate_bytes_sent = rate_bytes_sent
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_entries_sent Value to be assigned
    def rate_entries_sent=(rate_entries_sent)
      if rate_entries_sent.nil?
        fail ArgumentError, 'rate_entries_sent cannot be nil'
      end

      @rate_entries_sent = rate_entries_sent
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_total_requests Value to be assigned
    def rate_total_requests=(rate_total_requests)
      if rate_total_requests.nil?
        fail ArgumentError, 'rate_total_requests cannot be nil'
      end

      @rate_total_requests = rate_total_requests
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_failed_requests Value to be assigned
    def rate_failed_requests=(rate_failed_requests)
      if rate_failed_requests.nil?
        fail ArgumentError, 'rate_failed_requests cannot be nil'
      end

      @rate_failed_requests = rate_failed_requests
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          last_activity == o.last_activity &&
          last_error == o.last_error &&
          max_body_size == o.max_body_size &&
          num_bytes_sent == o.num_bytes_sent &&
          num_entries_sent == o.num_entries_sent &&
          num_spoofed_entries == o.num_spoofed_entries &&
          num_total_requests == o.num_total_requests &&
          num_failed_requests == o.num_failed_requests &&
          rate_bytes_sent == o.rate_bytes_sent &&
          rate_entries_sent == o.rate_entries_sent &&
          rate_total_requests == o.rate_total_requests &&
          rate_failed_requests == o.rate_failed_requests
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [last_activity, last_error, max_body_size, num_bytes_sent, num_entries_sent, num_spoofed_entries, num_total_requests, num_failed_requests, rate_bytes_sent, rate_entries_sent, rate_total_requests, rate_failed_requests].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
